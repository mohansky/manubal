---
// src/pages/admin/orders/[id].astro
import Container from "@/components/ui/Container.astro"; 
import Layout from "@/layouts/Layout.astro";
import ProfileLayout from "@/layouts/ProfileLayout.astro";
import { getOrderById, updateOrderStatus } from "@/lib/orders";

// Get order ID from URL
const { id } = Astro.params;
const orderId = parseInt(id || "0");

// Handle status update
let message = "";
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const newStatus = formData.get("status")?.toString();

    if (newStatus) {
      await updateOrderStatus(orderId, newStatus);
      message = "Order status updated successfully";
    }
  } catch (error) {
    console.error("Error updating status:", error);
    message = "Failed to update order status";
  }
}

// Fetch order details
const order = await getOrderById(orderId);

// Redirect if order not found
if (!order) {
  return Astro.redirect("/admin/orders");
}

// Format date
function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleString("en-IN", {
    day: "numeric",
    month: "short",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
}

// Format currency
function formatCurrency(amount: number) {
  return `â‚¹${amount.toFixed(2)}`;
}

// Available statuses
const statuses = ["pending", "processing", "shipped", "delivered", "cancelled"];

// Status badge classes for DaisyUI
const statusBadges: Record<string, string> = {
  pending: "badge-warning",
  processing: "badge-info",
  shipped: "badge-primary",
  delivered: "badge-success",
  cancelled: "badge-error",
};

// Function to get status badge class with fallback
function getStatusBadge(status: string): string {
  return statusBadges[status] || "badge-neutral";
}
---

<Layout>
  <ProfileLayout title={`Details for Order #${order.id}`}>
    <Container width="marginy">
      <!-- Success/Error Alert -->
      {
        message && (
          <div class="alert alert-success mb-4">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="stroke-current shrink-0 h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            <span>{message}</span>
          </div>
        )
      }

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <!-- Order Header Card -->
        <div class="card bg-base-100 shadow-sm">
          <div class="card-body">
            <div
              class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4"
            >
              <div>
                <h2 class="card-title text-2xl">Order #{order.id}</h2>
                <p class="text-base-content/70">
                  Placed on {formatDate(order.createdAt)}
                </p>
              </div>
              <div
                class="flex flex-col sm:flex-row items-start sm:items-center gap-4"
              >
                <div
                  class={`capitalize badge badge-sm ${getStatusBadge(order.status)}`}
                >
                  {order.status}
                </div>
                <form method="POST" class="flex items-center gap-2">
                  <select
                    name="status"
                    class="select select-bordered w-full max-w-xs"
                  >
                    {
                      statuses.map((status) => (
                        <option
                          value={status}
                          selected={status === order.status}
                        >
                          {status.charAt(0).toUpperCase() + status.slice(1)}
                        </option>
                      ))
                    }
                  </select>
                  <button type="submit" class="btn btn-primary">
                    Update
                  </button>
                </form>
              </div>
            </div>
          </div>
        </div>

        <!-- Customer Information -->
        <div class="card bg-base-100 shadow-sm mt-6">
          <div class="card-body">
            <h3 class="card-title mb-4">Customer Information</h3>
            <div class="grid gap-6">
              <div class="flex flex-col sm:flex-row">
                <div class="font-medium text-base-content/70 w-32 mb-1 sm:mb-0">
                  Customer:
                </div>
                <div class="font-medium">{order.customerName}</div>
              </div>
              <div class="flex flex-col sm:flex-row">
                <div class="font-medium text-base-content/70 w-32 mb-1 sm:mb-0">
                  Email:
                </div>
                <a
                  href={`mailto:${order.email}`}
                  class="link link-hover link-neutral"
                >
                  {order.email}
                </a>
              </div>
              <div class="flex flex-col sm:flex-row">
                <div class="font-medium text-base-content/70 w-32 mb-1 sm:mb-0">
                  Address:
                </div>
                <div>
                  {order.address}, {order.city}, {order.state}
                  {order.zipCode}
                </div>
              </div>
              <div class="flex flex-col sm:flex-row">
                <div class="font-medium text-base-content/70 w-32 mb-1 sm:mb-0">
                  Total:
                </div>
                <div class="font-bold text-lg">
                  {formatCurrency(order.total)}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
   

    <!-- Order Items -->
    <div class="card bg-base-100 shadow-sm mt-6">
      <div class="card-body">
        <h3 class="card-title mb-4">Order Items</h3>

        <div class="overflow-x-auto">
          <table class="table">
            <thead class="bg-base-200/30">
              <tr>
                <th
                  scope="col"
                  class="text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Product</th
                >
                <th
                  scope="col"
                  class="text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Price</th
                >
                <th
                  scope="col"
                  class="text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Quantity</th
                >
                <!-- <th
                scope="col"
                class="text-xs font-medium text-gray-500 uppercase tracking-wider"
                >Tax</th
              > -->
                <th
                  scope="col"
                  class="text-xs text-right font-medium text-gray-500 uppercase tracking-wider"
                  >Total</th
                >
              </tr>
            </thead>
            <tbody>
              {
                order.items.map((item) => (
                  <tr class="hover:bg-base-200/30">
                    <td>
                      <div>
                        <div class="font-medium">{item.productName}</div>
                        <div class="text-sm text-base-content/70">
                          ID: {item.productId}
                        </div>
                      </div>
                    </td>
                    <td>{formatCurrency(item.price)}</td>
                    <td>{item.quantity}</td>
                    {/* <td>{formatCurrency(item.price * 0.05)}</td> */}
                    <td class="text-right font-medium">
                      {/* {formatCurrency(item.price + item.price * 0.05)} */}
                      {formatCurrency(item.total)}
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>

        <!-- Order Summary -->
        <div class="divider"></div>
        <div class="flex flex-col gap-2 max-w-md ml-auto">
          <div class="flex justify-between">
            <span class="text-base-content/70">Subtotal:</span>
            <span>{formatCurrency(order.subtotal)}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-base-content/70">Shipping:</span>
            <span>{formatCurrency(order.shipping)}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-base-content/70">Tax:</span>
            <span>{formatCurrency(order.tax)}</span>
          </div>
          <div class="divider my-2"></div>
          <div class="flex justify-between text-lg font-bold">
            <span>Total:</span>
            <span>{formatCurrency(order.total)}</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="flex flex-col sm:flex-row justify-between gap-4 mt-6">
      <a href="/admin/orders" class="btn btn-soft btn-sm">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-4 w-4 mr-2"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Back to Orders
      </a>

      <button
        type="button"
        onclick="window.print()"
        class="btn btn-neutral btn-sm"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-4 w-4 mr-2"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"
          ></path>
        </svg>
        Print Order
      </button>
    </div>
     </Container>
  </ProfileLayout>
</Layout>
