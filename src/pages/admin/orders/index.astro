---
// src/pages/admin/orders/index.astro
import Container from "@/components/ui/Container.astro"; 
import Layout from "@/layouts/Layout.astro";
import ProfileLayout from "@/layouts/ProfileLayout.astro";
import { getAllOrders } from "@/lib/orders";

// Fetch all orders
const orders = await getAllOrders();

// Format date from ISO string
function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleString("en-IN", {
    day: "numeric",
    month: "short",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
}

// Format currency
function formatCurrency(amount: number) {
  return `â‚¹${amount.toFixed(2)}`;
}

// Status badge colors
const statusColors: Record<string, string> = {
  pending: "badge-warning",
  processing: "badge-info",
  shipped: "badge-success",
  delivered: "badge-accent",
  cancelled: "badge-error",
};

// Function to get status color or fallback
function getStatusColor(status: string): string {
  return statusColors[status] || "bg-gray-100 text-gray-800";
}
---

<Layout>
  <ProfileLayout title="Order Management">
    <Container width="marginy">
      <div class="card">
        <div class="card-body">
          <h3 class="text-lg leading-6 font-medium text-gray-900">
            Orders ({orders.length})
          </h3>
          <p class="mt-1 text-sm text-gray-500">
            View and manage all customer orders
          </p>
        </div>

        {
          orders.length === 0 ? (
            <div class="p-6 text-center text-gray-500">No orders found</div>
          ) : (
            <div class="overflow-x-auto">
              <table class="table">
                {/* <!-- head --> */}
                <thead>
                  <tr class="bg-base-200">
                    <th class="max-w-max" />
                    <th
                      scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Date
                    </th>
                    <th
                      scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Status
                    </th>
                    <th
                      scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Customer Name
                    </th>
                    <th
                      scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      No. of items
                    </th>
                    <th
                      scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Total Amt.
                    </th>
                    <th
                      scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {orders.map((order) => (
                    <tr class="hover:bg-base-300/10">
                      <th class="max-w-10">Order #{order.id}</th>
                      <td class="max-w-10"> {formatDate(order.createdAt)}</td>
                      <td>
                        <div
                          class={`capitalize badge ${getStatusColor(order.status)}`}
                        >
                          {order.status}
                        </div>
                      </td>
                      <td>{order.customerName}</td>
                      <td>
                        {order.itemCount}{" "}
                        {order.itemCount === 1 ? "item" : "items"}
                      </td>
                      <td> {formatCurrency(order.total)}</td>
                      <td>
                        <div class="flex gap-2">
                          <a
                            href={`/admin/orders/${order.id}`}
                            class="btn btn-accent btn-sm"
                          >
                            View
                          </a>
                          <button
                            class="btn btn-error btn-sm delete-order-btn"
                            data-order-id={order.id}
                            data-customer-name={order.customerName}
                          >
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )
        }
      </div>

      <!-- Delete Confirmation Modal -->
      <dialog id="delete_modal" class="modal">
        <div class="modal-box">
          <h3 class="font-bold text-lg">Confirm Delete</h3>
          <p class="py-4">
            Are you sure you want to delete <span
              id="delete-order-info"
              class="font-semibold"></span>? This action cannot be undone.
          </p>
          <div class="modal-action">
            <form method="dialog">
              <button class="btn">Cancel</button>
            </form>
            <button id="confirm-delete-btn" class="btn btn-error"
              >Delete Order</button
            >
          </div>
        </div>
      </dialog>

      <!-- Toast Container -->
      <div class="toast toast-top toast-end z-50" id="toast-container"></div>
    </Container>
  </ProfileLayout>
</Layout>

<script>
  // Toast notification system
  class ToastManager {
    private container: HTMLElement;

    constructor() {
      this.container =
        document.getElementById("toast-container") || this.createContainer();
    }

    private createContainer(): HTMLElement {
      const container = document.createElement("div");
      container.id = "toast-container";
      container.className = "toast toast-top toast-end z-50";
      document.body.appendChild(container);
      return container;
    }

    show(
      message: string,
      type: "success" | "error" | "info" | "warning" = "info",
      duration: number = 4000
    ): void {
      const toast = document.createElement("div");

      let alertClass = "";
      let icon = "";

      switch (type) {
        case "success":
          alertClass = "alert-success";
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case "error":
          alertClass = "alert-error";
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case "warning":
          alertClass = "alert-warning";
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" /></svg>`;
          break;
        default:
          alertClass = "alert-info";
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
      }

      toast.className = `alert ${alertClass} shadow-lg mb-2`;
      toast.innerHTML = `
        <div class="flex items-center">
          ${icon}
          <span class="ml-2">${message}</span>
        </div>
        <div class="flex-none">
          <button class="btn btn-sm btn-ghost btn-circle" onclick="this.closest('.alert').remove()">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      `;

      this.container.appendChild(toast);

      // Auto remove
      setTimeout(() => {
        if (toast.parentElement) {
          toast.remove();
        }
      }, duration);
    }
  }

  function initOrdersPage() {
    const toastManager = new ToastManager();
    const deleteModal = document.getElementById(
      "delete_modal"
    ) as HTMLDialogElement;
    const deleteOrderInfo = document.getElementById("delete-order-info");
    const confirmDeleteBtn = document.getElementById("confirm-delete-btn");

    let orderToDelete: { id: number; name: string } | null = null;

    // Handle delete button clicks
    document.querySelectorAll(".delete-order-btn").forEach((button) => {
      button.addEventListener("click", function (this: HTMLButtonElement) {
        const orderId = this.getAttribute("data-order-id");
        const customerName = this.getAttribute("data-customer-name");

        if (orderId && customerName && deleteOrderInfo) {
          orderToDelete = { id: parseInt(orderId), name: customerName };
          deleteOrderInfo.textContent = `Order #${orderId} for ${customerName}`;
          deleteModal?.showModal();
        }
      });
    });

    // Handle confirm delete
    confirmDeleteBtn?.addEventListener(
      "click",
      async function (this: HTMLButtonElement) {
        if (!orderToDelete) return;

        // Show loading state
        this.disabled = true;
        this.textContent = "Deleting...";

        try {
          const response = await fetch(
            `/api/orders/${orderToDelete.id}/delete`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          const result = await response.json();

          if (result.success) {
            toastManager.show("Order deleted successfully!", "success");

            // Close modal
            deleteModal?.close();

            // Reload page after short delay
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            throw new Error(result.error || "Failed to delete order");
          }
        } catch (error: any) {
          console.error("Delete error:", error);
          toastManager.show(
            error.message || "Failed to delete order. Please try again.",
            "error"
          );
        } finally {
          // Reset button state
          this.disabled = false;
          this.textContent = "Delete Order";
        }
      }
    );
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", initOrdersPage);

  // For Astro View Transitions
  document.addEventListener("astro:page-load", initOrdersPage);
</script>
