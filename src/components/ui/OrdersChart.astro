---
import Heading from "./Heading.astro";

// OrdersChart.astro
---

<div class="card bg-base-200/30 shadow-sm">
  <div class="card-body">
    <h2 class="card-title">Orders Per Month</h2>

    <div id="chart-loading" class="flex items-center justify-center h-64">
      <span class="loading loading-spinner loading-lg"></span>
    </div>

    <div id="chart-error" class="alert alert-error hidden">
      <span id="error-message">Failed to load chart data</span>
    </div>

    <div id="chart-container" class="h-80 w-full hidden">
      <canvas id="ordersChart"></canvas>
    </div>

    <div class="flex gap-2 mt-4">
      <button id="lineChartBtn" class="btn btn-primary btn-sm"
        >Line Chart</button
      >
      <button id="barChartBtn" class="btn btn-outline btn-sm">Bar Chart</button>
      <button id="toggleRevenueBtn" class="btn btn-accent btn-sm"
        >Show Revenue</button
      >
    </div>

    <div id="stats-container" class="stats stats-horizontal shadow mt-4 hidden">
      <div class="stat">
        <div class="stat-title">Total Orders</div>
        <Heading
          fontweight="bold"
          size="xl"
          id="total-orders"
          class="text-warning">0</Heading
        >
        <!-- <div class="stat-value text-primary" id="total-orders">0</div> -->
        <div class="stat-desc">Last 12 months</div>
      </div>

      <div class="stat">
        <div class="stat-title">Total Revenue</div>
        <Heading
          fontweight="bold"
          size="xl"
          id="total-revenue"
          class="text-info">0</Heading
        >
        <!-- <div class="stat-value text-accent" id="total-revenue">₹0.00</div> -->
        <div class="stat-desc">Last 12 months</div>
      </div>

      <div class="stat">
        <div class="stat-title">Avg Orders/Month</div>
        <Heading fontweight="bold" size="xl" id="avg-orders" class="text-accent"
          >0</Heading
        >
        <!-- <div class="stat-value" id="avg-orders">0</div> -->
        <div class="stat-desc">12 month average</div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.js"
></script>

<script is:inline>
  let chartInstance = null;
  let chartData = [];
  let showRevenue = false;

  // Currency formatting function for client-side use
  function formatCurrency(amount) {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
    }).format(amount);
  }

  function waitForChart() {
    if (typeof Chart !== "undefined") {
      console.log("Chart.js loaded successfully");
      initializeChart();
    } else {
      console.log("Waiting for Chart.js...");
      setTimeout(waitForChart, 100);
    }
  }

  function initializeChart() {
    console.log("Initializing chart system");
    loadChartData();
    setupEventListeners();
  }

  async function loadChartData() {
    try {
      console.log("Loading chart data...");

      const response = await fetch("/api/orders/monthly-stats");
      if (!response.ok) throw new Error("Failed to fetch data");

      chartData = await response.json();
      console.log("Chart data loaded:", chartData);

      if (!Array.isArray(chartData) || chartData.length === 0) {
        showError("No order data available");
        return;
      }

      chartData = chartData.map((item) => ({
        ...item,
        monthName: formatMonth(item.month),
      }));

      hideLoading();
      createChart();
      updateStats();
    } catch (error) {
      console.error("Error loading data:", error);
      showError("Failed to load chart data");
    }
  }

  function formatMonth(monthStr) {
    const parts = monthStr.split("-");
    const year = parseInt(parts[0]);
    const month = parseInt(parts[1]) - 1;
    const date = new Date(year, month);
    return date.toLocaleDateString("en-US", {
      month: "short",
      year: "2-digit",
    });
  }

  function hideLoading() {
    document.getElementById("chart-loading").classList.add("hidden");
    document.getElementById("chart-container").classList.remove("hidden");
    document.getElementById("stats-container").classList.remove("hidden");
  }

  function showError(message) {
    document.getElementById("chart-loading").classList.add("hidden");
    document.getElementById("error-message").textContent = message;
    document.getElementById("chart-error").classList.remove("hidden");
  }

  function createChart(type) {
    if (!type) type = "line";

    console.log("Creating chart with type:", type, "showRevenue:", showRevenue);

    if (typeof Chart === "undefined") {
      console.error("Chart.js not loaded");
      showError("Chart.js library not loaded");
      return;
    }

    const canvas = document.getElementById("ordersChart");
    if (!canvas) {
      console.error("Canvas not found");
      return;
    }

    const ctx = canvas.getContext("2d");

    if (chartInstance) {
      chartInstance.destroy();
    }

    const datasets = [
      {
        label: "Orders",
        data: chartData.map((item) => item.orderCount),
        borderColor: "#2563eb",
        backgroundColor: type === "bar" ? "#2563eb" : "rgba(37, 99, 235, 0.1)",
        borderWidth: 2,
        fill: type === "line",
        tension: 0.4,
        yAxisID: "y",
      },
    ];

    if (showRevenue) {
      datasets.push({
        label: "Revenue (₹)",
        data: chartData.map((item) => item.totalRevenue),
        borderColor: "#dc2626",
        backgroundColor: type === "bar" ? "#dc2626" : "rgba(220, 38, 38, 0.1)",
        borderWidth: 2,
        fill: type === "line",
        tension: 0.4,
        yAxisID: "y1",
      });
    }

    const scales = {
      y: {
        type: "linear",
        display: true,
        position: "left",
        beginAtZero: true,
        title: {
          display: true,
          text: "Number of Orders",
        },
      },
    };

    if (showRevenue) {
      scales.y1 = {
        type: "linear",
        display: true,
        position: "right",
        beginAtZero: true,
        title: {
          display: true,
          text: "Revenue (₹)",
        },
        grid: {
          drawOnChartArea: false,
        },
      };
    }

    chartInstance = new Chart(ctx, {
      type: type,
      data: {
        labels: chartData.map((item) => item.monthName),
        datasets: datasets,
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "top",
          },
          tooltip: {
            callbacks: {
              label: function (context) {
                let label = context.dataset.label || "";
                if (label) {
                  label += ": ";
                }
                if (context.dataset.label === "Revenue (₹)") {
                  label += formatCurrency(context.parsed.y);
                } else {
                  label += context.parsed.y + " orders";
                }
                return label;
              },
            },
          },
        },
        scales: scales,
      },
    });

    console.log("Chart created successfully");
  }

  function updateStats() {
    const totalOrders = chartData.reduce(
      (sum, item) => sum + item.orderCount,
      0
    );
    const totalRevenue = chartData.reduce(
      (sum, item) => sum + item.totalRevenue,
      0
    );
    const avgOrders =
      chartData.length > 0 ? Math.round(totalOrders / chartData.length) : 0;

    document.getElementById("total-orders").textContent = totalOrders;
    // ✅ Now using formatCurrency function
    document.getElementById("total-revenue").textContent =
      formatCurrency(totalRevenue);
    document.getElementById("avg-orders").textContent = avgOrders;
  }

  function setupEventListeners() {
    const lineBtn = document.getElementById("lineChartBtn");
    const barBtn = document.getElementById("barChartBtn");
    const toggleRevenueBtn = document.getElementById("toggleRevenueBtn");

    if (lineBtn) {
      lineBtn.addEventListener("click", function () {
        createChart("line");
        this.classList.add("btn-primary");
        this.classList.remove("btn-outline");
        barBtn.classList.remove("btn-primary");
        barBtn.classList.add("btn-outline");
      });
    }

    if (barBtn) {
      barBtn.addEventListener("click", function () {
        createChart("bar");
        this.classList.add("btn-primary");
        this.classList.remove("btn-outline");
        lineBtn.classList.remove("btn-primary");
        lineBtn.classList.add("btn-outline");
      });
    }

    if (toggleRevenueBtn) {
      toggleRevenueBtn.addEventListener("click", function () {
        showRevenue = !showRevenue;
        console.log("Toggled revenue to:", showRevenue);

        const currentType = chartInstance ? chartInstance.config.type : "line";
        createChart(currentType);

        this.textContent = showRevenue ? "Hide Revenue" : "Show Revenue";
      });
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    console.log("DOM loaded, waiting for Chart.js...");
    waitForChart();
  });
</script>

<style>
  #chart-container {
    min-height: 320px;
  }
  #ordersChart {
    width: 100% !important;
    height: 320px !important;
  }
</style>
